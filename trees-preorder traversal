/*
Problem Description
Given a binary tree, return the preorder traversal of its nodes values.



Problem Constraints
1 <= number of nodes <= 105



Input Format
First and only argument is root node of the binary tree, A.



Output Format
Return an integer array denoting the preorder traversal of the given binary tree.

*/

Java

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *         val = x;
 *         left=null;
 *         right=null;
 *     }
 * }
 */
public class Solution {
    public int[] preorderTraversal(TreeNode A) {
        if (A == null) {
            return new int[0];
        }
        Stack<TreeNode> st = new Stack<>();
        List<Integer> result = new ArrayList<>();
        st.push(A);
        while (!st.isEmpty()) {
            TreeNode node = st.pop();
            result.add(node.val);
            // Push right child first to ensure left-to-right traversal
            if (node.right != null) {
                st.push(node.right);
            }
            if (node.left != null) {
                st.push(node.left);
            }
        }
        // Convert the result list to an array
        int[] ans = new int[result.size()];
        for (int i = 0; i < result.size(); i++) {
            ans[i] = result.get(i);
        }
        return ans;
    }
}

---
Python

# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = None

class Solution:
    # @param A : root node of tree
    # @return a list of integers
    def preorderTraversal(self, A):
        """
        Performs preorder traversal of a binary tree.

        Args:
            A: The root node of the binary tree.

        Returns:
            A list of integers representing the preorder traversal of the tree.
        """

        if not A:
            return []

        stack = []
        result = []
        stack.append(A)

        while stack:
            node = stack.pop()
            result.append(node.val)

            # Push right child first to ensure left-to-right traversal
            if node.right:
                stack.append(node.right)
            if node.left:
                stack.append(node.left)

        return result

----

The time complexity of the preorderTraversal function is O(n), where n is the number of nodes in the binary tree. This is because each node is visited exactly once during the traversal, and the operations within the loop are constant time.

The space complexity is also O(n) in the worst case, which occurs when the tree is skewed to the right. In this case, the stack can potentially store up to n nodes. In the best case, when the tree is balanced, the space complexity is O(log n), as the maximum depth of a balanced binary tree is log n.









Pascal's Triangle

Problem Description
Write a program to print the pascal triangle up to A rows.


Problem Constraints
1 <= A <= 25


Input Format
The first argument is an integer A.


Output Format
Return a 2D array consisting of A rows whose each row contains A integers.


public class Solution {
    public int[][] solve(int A) {
        int[][] triangle = new int[A][A];
        // Iterate through each row of the triangle
        for (int i = 0; i < A; i++) {
            // Initialize the first element of each row to 1
            triangle[i][0] = 1;
            // Calculate the remaining elements of the row
            for (int j = 1; j <= i; j++) {
                // If it's the last element of the row, set it to 1
                if (j == i) {
                    triangle[i][j] = 1;
                } else {
                    // Otherwise, calculate the element using the previous row
                    triangle[i][j] = triangle[i - 1][j - 1] + triangle[i - 1][j];
                }
            }
        }
        // Return the completed Pascal triangle
        return triangle;
    }
}

---



class Solution:
    # @param A : integer
    # @return a list of list of integers
    def solve(self, A):
        """Calculates the Pascal triangle up to the given number of rows.
        Args:
            A: The number of rows to calculate.
        Returns:
            A 2D array consisting of A rows, each containing A integers with trailing zeros.
        """
        triangle = []
        for i in range(A):
            row = [0] * A  # Initialize the row with zeros
            row[0] = 1  # Set the first element to 1
            # Calculate the remaining elements based on the previous row
            for j in range(1, i + 1):
                if j == i:  # Last element in the row
                    row[j] = 1
                else:
                    row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]
            triangle.append(row)
        return triangle



The time complexity of the above code to calculate the Pascal triangle is O(n^2). This is because the outer loop iterates n times (where n is the number of rows), and the inner loop iterates at most n times for each outer loop iteration. Therefore, the total number of iterations is proportional to n^2.
The space complexity is also O(n^2), as the Pascal triangle is a 2D array of size n x n. This means that the memory usage grows quadratically with the number of rows.


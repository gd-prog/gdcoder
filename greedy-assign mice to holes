Assign Mice to holes

Problem Description
N Mice and N holes are placed in a straight line. Each hole can accommodate only one mouse.
The positions of Mice are denoted by array A, and the position of holes is denoted by array B.
A mouse can stay at his position, move one step right from x to x + 1, or move one step left from x to x − 1. Any of these moves consume 1 minute.
Assign mice to holes so that the time when the last mouse gets inside a hole is minimized.


Problem Constraints
1 <= N <= 105
-109 <= A[i], B[i] <= 109


Input Format
The first argument is an integer array A.
The second argument is an integer array B.


Output Format
Return an integer denoting the minimum time when the last nouse gets inside the holes.


Example Input
Input 1:
 A = [-4, 2, 3]
 B = [0, -2, 4]
Input 2:
 A = [-2]
 B = [-6]


Example Output
Output 1:
 2
Output 2:
 4







Java


public class Solution {
    public int mice(int[] A, int[] B) {
        int n = A.length;
        // Sort the arrays in ascending order
        Arrays.sort(A);
        Arrays.sort(B);
        // Initialize the maximum time to 0
        int maxTime = 0;
        // Iterate through both arrays and assign mice to holes
        for (int i = 0; i < n; i++) {
            // Calculate the time taken for the mouse to reach its hole
            int time = Math.abs(A[i] - B[i]);
            // Update the maximum time if necessary
            maxTime = Math.max(maxTime, time);
        }
        // Return the maximum time taken by any mouse
        return maxTime;
    }
}



Python



class Solution:
    # @param A : list of integers
    # @param B : list of integers
    # @return an integer
    def mice(self, A, B):
        n = len(A)
        # Sort the arrays in ascending order
        A.sort()
        B.sort()
        # Initialize the maximum time to 0
        max_time = 0
        # Iterate through both arrays and assign mice to holes
        for i in range(n):
            # Calculate the time taken for the mouse to reach its hole
            time = abs(A[i] - B[i])
            # Update the maximum time if necessary
            max_time = max(max_time, time)
        # Return the maximum time taken by any mouse
        return max_time



The time complexity of the provided code is O(N log N), where N is the number of mice (or holes).
Here's a breakdown of the time complexity analysis:
	• Sorting: The sort() function used to sort the A and B arrays has a time complexity of O(N log N) in .
	• Iteration and assignment: The loop iterating through both arrays and assigning mice to holes takes linear time, O(N).
Since the sorting dominates the overall time complexity, the total time complexity is O(N log N).
The space complexity of the code is O(1) as the algorithm only uses constant extra space for variables and arrays. The sorting algorithm in uses in-place sorting, so it doesn't require additional space proportional to the input size.

Double Character Trouble

Problem Description
You have a string, denoted as A.

To transform the string, you should perform the following operation repeatedly:
1. Identify the first occurrence of consecutive identical pairs of characters within the string.
2. Remove this pair of identical characters from the string.
3. Repeat steps 1 and 2 until there are no more consecutive identical pairs of characters.
The final result will be the transformed string.


Problem Constraints
1 <= |A| <= 100000


Input Format
First and only argument is string A.


Output Format
Return the final string.


Example Input
Input 1:
 A = "abccbc"
Input 2:
 A = "ab"


Example Output
Output 1:
 "ac"
Output 2:
 "ab"


Example Explanation
Explanation 1:
The Given string is "abccbc".

Remove the first occurrence of consecutive identical pairs of characters "cc".
After removing the string will be "abbc".

Again Removing the first occurrence of consecutive identical pairs of characters "bb".
After remvoing, the string will be "ac".

Now, there is no consecutive identical pairs of characters.
Therefore the string after this operation will be "ac".
Explanation 2:
 No removals are to be done.




public class Solution {
    public String solve(String A) {
        Stack<Character> stk = new Stack<>();  // Create a stack to store characters
        for (int i = 0; i < A.length(); i++) {
            char ch = A.charAt(i);  // Get the current character
            if (!stk.isEmpty() && ch == stk.peek()) {  // If the stack is not empty and the current character matches the top element
                stk.pop();  // Remove the top element from the stack
            } else {  // If the current character doesn't match the top element
                stk.push(ch);  // Push the current character onto the stack
            }
        }
        String ans = "";  // Initialize an empty string to store the result
        while (!stk.isEmpty()) {  // While the stack is not empty
            ans = stk.pop() + ans;  // Pop the top element and add it to the beginning of the result string
        }
        return ans;  // Return the final result string
    }
}


---


class Solution:
    # @param A : string
    # @return a string
    def solve(self, A):
        """
        Removes consecutive identical pairs of characters from a string.
        Args:
            A: The input string.
        Returns:
            The transformed string.
        """
        
        stack = []  # Initialize an empty stack
        for char in A:
            if stack and stack[-1] == char:
                stack.pop()  # Remove the last character in the stack if it's the same as the current one
            else:
                stack.append(char)  # Otherwise, add the current character to the stack
        return ''.join(stack)  # Convert the stack to a string and return it

---

Time Complexity Analysis
The code iterates through each character in the input string once. The operations within the loop, like stack push, pop, and character comparison, are constant-time operations. Therefore, the overall time complexity is O(n), where n is the length of the input string.
 
Space Complexity Analysis
The primary data structure used is a stack. In the worst case, the stack might need to store all characters if there are no consecutive identical pairs. The size of the stack is directly proportional to the length of the input string. Therefore, the space complexity is also O(n).


/*Median of Array

Problem Description
There are two sorted arrays A and B of sizes N and M respectively.
Find the median of the two sorted arrays ( The median of the array formed by merging both the arrays ).
NOTE:
	• The overall run time complexity should be O(log(m+n)).
	• IF the number of elements in the merged array is even, then the median is the average of (n/2)th and (n/2+1)th element. For example, if the array is [1 2 3 4], the median is (2 + 3) / 2.0 = 2.5.


Problem Constraints
1 <= N + M <= 2*106


Input Format
The first argument is an integer array A of size N.
The second argument is an integer array B of size M.


Output Format
Return a decimal value denoting the median of two sorted arrays.
*/


Java

public class Solution {
    // DO NOT MODIFY BOTH THE LISTS
    public double findMedianSortedArrays(final List<Integer> a, final List<Integer> b) {
        int n1 = a.size();
        int n2 = b.size();
        int n = n1 + n2;
        // Calculate the index of the median element in the merged sorted array
        int left = (n + 1) / 2;
        // Determine which array is smaller to optimize the binary search
        final List<Integer> smallest = a.size() > b.size() ? b : a;
        final List<Integer> largest = a.size() > b.size() ? a : b;
        int s = 0, e = smallest.size();
        // Perform binary search to find the partition point
        while (s <= e) {
            int mid = (s + e) / 2;
            int mid2 = left - mid;
            // Calculate elements at the partition points
            int l1 = mid == 0 ? Integer.MIN_VALUE : smallest.get(mid - 1);
            int r1 = mid < smallest.size() ? smallest.get(mid) : Integer.MAX_VALUE;
            int l2 = mid2 == 0 ? Integer.MIN_VALUE : largest.get(mid2 - 1);
            int r2 = mid2 < largest.size() ? largest.get(mid2) : Integer.MAX_VALUE;
            // Adjust the partition based on the comparison of elements
            if (l1 > r2) {
                // Median lies in the left half of `smallest`
                e = mid - 1;
            } else if (l2 > r1) {
                // Median lies in the right half of `smallest`
                s = mid + 1;
            } else {
                // Correct partitioning found
                if (n % 2 == 0) {
                    // For even number of elements, calculate the average of the two middle elements
                    return (double) ((double) Math.max(l1, l2) + (double) Math.min(r1, r2)) / 2.0;
                } else {
                    // For odd number of elements, return the larger of the two middle elements
                    return (double) Math.max(l1, l2);
                }
            }
        }
        // This line should never be reached as the median is always found
        return 0;
    }
}


Python


class Solution:
    # @param A : tuple of integers
    # @param B : tuple of integers
    # @return a double
    def findMedianSortedArrays(self, A, B):
        """
        Finds the median of two sorted arrays.
        Args:
            A (tuple[int]): The first sorted array.
            B (tuple[int]): The second sorted array.
        Returns:
            float: The median of the two sorted arrays.
        """
        m = len(A)
        n = len(B)
        # Ensure A is always the smaller array
        if m > n:
            A, B = B, A
            m, n = n, m
        # Calculate the index of the median element in the merged sorted array
        left = (m + n + 1) // 2
        # Perform binary search to find the partition point
        low = 0
        high = m
        while low <= high:
            i = (low + high) // 2
            j = left - i
            # Calculate elements at the partition points
            num1_left = A[i - 1] if i > 0 else float('-inf')
            num1_right = A[i] if i < m else float('inf')
            num2_left = B[j - 1] if j > 0 else float('-inf')
            num2_right = B[j] if j < n else float('inf')
            # Adjust the partition based on the comparison of elements
            if num1_left > num2_right:
                high = i - 1
            elif num2_left > num1_right:
                low = i + 1
            else:
                # Correct partitioning found
                if (m + n) % 2 == 0:
                    # For even number of elements, calculate the average of the two middle elements
                    return (max(num1_left, num2_left) + min(num1_right, num2_right)) / 2.0
                else:
                    # For odd number of elements, return the larger of the two middle elements
                    return max(num1_left, num2_left)
        # This line should never be reached as the median is always found
        return 0



Time Complexity:

Binary Search: The core algorithm uses binary search to efficiently find the partition point. In each iteration, the search space is halved.
Comparisons and Calculations: Within each iteration of the binary search loop, there are constant-time operations for comparisons and calculations of num1_left, num1_right, num2_left, and num2_right.
Median Calculation: The final step of calculating the median involves constant-time operations for maximum, minimum, and average calculations.
Therefore, the overall time complexity is O(log(m + n)), where m and n are the lengths of the two arrays. This is because the binary search reduces the search space by half in each iteration, and the other operations within the loop are constant-time.

Space Complexity:

Auxiliary Space: The code primarily uses constant-time variables to store the partition indices, elements at the partition points, and the median result.
Input Arrays: The original input arrays A and B are not modified, so they are considered part of the input and do not contribute to the auxiliary space.
Therefore, the space complexity is O(1), indicating that the algorithm uses a constant amount of extra space regardless of the input size.

In summary:

The time complexity is O(log(m + n)), which is efficient for large input arrays.
The space complexity is O(1), making the algorithm memory-efficient.
This analysis demonstrates that the provided code effectively finds the median of two sorted arrays with a time and space complexity that is suitable for most practical use cases.
